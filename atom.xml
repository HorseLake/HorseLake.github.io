<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://HorseLake.github.io</id>
    <title>胡瑞涵官方网站</title>
    <updated>2020-05-17T11:58:41.396Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://HorseLake.github.io"/>
    <link rel="self" href="https://HorseLake.github.io/atom.xml"/>
    <subtitle>任何伟大的目标，都有一个微不足道的开始</subtitle>
    <logo>https://HorseLake.github.io/images/avatar.png</logo>
    <icon>https://HorseLake.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 胡瑞涵官方网站</rights>
    <entry>
        <title type="html"><![CDATA[同学搞笑语录]]></title>
        <id>https://HorseLake.github.io/post/Student funny/</id>
        <link href="https://HorseLake.github.io/post/Student funny/">
        </link>
        <updated>2020-05-15T12:40:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1">#1</h2>
<p>语文老师：“送鲍浩然之浙东”这个“之”是什么意思？<br>
同学们：到、去的意思。<br>
语文老师：嗯，“之浙东”是什么意思啊？<br>
陈*浩：送鲍浩然上西天。😄</p>
<h2 id="2">#2</h2>
<p>语文老师：好了好了，快放学了，布置下作业。<br>
同学们：什么作业啊？<br>
语文老师：抄写古诗原文，译文，主题思想和带点字意思。<br>
陈*浩：老师你**的，操😱！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用户举报专区有趣语录册]]></title>
        <id>https://HorseLake.github.io/post/yong-hu-ju-bao-zhuan-qu-you-qu-yu-lu-ce/</id>
        <link href="https://HorseLake.github.io/post/yong-hu-ju-bao-zhuan-qu-you-qu-yu-lu-ce/">
        </link>
        <updated>2020-04-21T11:37:46.000Z</updated>
        <content type="html"><![CDATA[<h2 id="注意因考虑到个人隐私所以除了部分比较著名的用户其他用户概不出示出处-未完待续">注意：因考虑到个人隐私，所以除了部分比较著名的用户，其他用户概不出示出处。（未完待续）</h2>
<ul>
<li>不管，请私下使用武力解决。——kkksc03名言#1</li>
<li>所以是怎么回事？——kkksc03名言#2</li>
<li>请问题解是用来做什么的？通过题解来学习算法才是题解的价值所在，我通过学习题解来提升自己是一种学习方法，你不懂这种学习方法不要怪别人，你不能通过学习借鉴提升自己在于你自己，请不要否认题解的价值。</li>
<li>本事件不仅具有较大的危害性，还涉嫌违反中华人民共和国知识产权保护法。</li>
<li>我复制题解的目的不是刷排名！要不能不删注释，一点不改直接粘吗？我只是记录下看过这道题，方便以后再看。没想到会被举报，生气。</li>
<li>你哪看到我一样了？？如果连自己手打一遍看题解再自己做都算 那洛谷有多少棕名？题解又有何意义？</li>
<li>照你这么说我A+B用cin和scanf也算抄了？你怎么不这么说呢？！</li>
<li>你有病吧，脑残吧，狗娘养的，你有个屁本事啊，我就是自暴自弃，有本事封我大号呀！来呀！</li>
<li>关于我的举报材料:本贴明确说明3条以上即可，没有说明含或不含，和洛谷其他规定冲突并非我的本意，也并非我需要尽的核实义务。关于我的动机:本贴第40页我的回复明确表明，这就是针对我的题目被恶评而引发的报复性行为。然而，我的报复依照如上规定，并无问题。如果这也有问题，那你只指责我一个人发三条记录是否也属于报复行为呢?lxl粽掉抄袭自己题的题解的人，是否也不恰当呢?不是我的行为导致别人粽名，是别人的行为导致自己粽名。自己抄了题解，一点歉意没有，反而指责举报者?你下次应该怪电脑有复制功能能让你抄袭，还是浏览器能上洛谷，还是怪洛谷的管理管理规定呢?反正不怪自己对吧。你良心肯定不会痛。你有良心吗?另外，鉴于你的回复，我盯上你了。如果再有抄题解，指不定我哪天还得说。</li>
<li>我跟管理承认错误了，他没理我，请不要封，邮件发了，没理我，再次道歉</li>
<li>就事论事，如果觉得自己冤枉请搬出证据，以事实说理，而不是以“和气”“蔑视水平”“谁还没抄过题解”之类的理由诡辩。</li>
<li>但是请不要封禁IP，我们几个都是同一个机构的，通过洛谷刷题。由于是静态IP，请不要封禁！</li>
<li>你活着浪费时间， 搞得全世界TLE。你死了浪费时间， 搞得全世界TLE。你半死不活天天报零， 搞得全世界TLE。你习什么不好？ 偏学编程。你学啥不好？ 偏学c++。用啥头文件不好？ 非用#include&lt;bits/stdc++.h&gt;。</li>
<li>哎……浪费口水</li>
<li>就一点新手村的题解，我闭着眼都能做出来，而且也不想盗用，真的</li>
<li>他在教室里嚷嚷，说他抄了136道黑题。看不下去了，他说随便你举报。</li>
<li>你不但不会棕，相反你会因为恶意举报而禁言或封号</li>
<li>十分感谢您指出我的错误，不如您干脆把最近AA的几乎所有人都举报一下，您意下如何？但是吧，据我所知这玩意在去年的时候题解里都有特判的而且数据都是在讨论里公开了的，试问您是怎么定义骗取数据的呢？而且这程序是我去年交的一模一样的程序，在去年3月份的时候怎么没看见您呢？</li>
<li>那您的代码为什么和题解一模一样呢？就算直接用STL就可以过也不至于一字都不差吧，您还想继续掩饰什么？难道容易题抄题解就不叫抄题解吗？难道您认为抢劫抢几万就是抢劫，抢几千就不是抢劫了吗？而且11号数据在出来的时候就公开了，您凭什么说是骗取/套取数据？</li>
<li>特判难道不是一种做法吗？就好比文化之旅那道题，我开始特判一下起点和终点颜色相同就输出-1就是不被允许的吗？那么照您这么说请您把那几百个多个靠特判了AC了的都举报了吧。然而您就找我，您是刻意针对我吗？感觉突然被未来要进国家队打IOI的大佬针对实在是太可怕了，想想都后怕。</li>
<li>有完没完？ 前面举报我抄题解，我又回去把那些题都看了几遍。现在举报得还不过瘾，搞一个整合版，非要把我搞棕，你无不无聊。此人检举别人极具天赋，建议洛谷带走做印度男工。随便他搞。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows 10常用快捷键，你值得拥有]]></title>
        <id>https://HorseLake.github.io/post/windows-10-chang-yong-kuai-jie-jian-ni-zhi-de-yong-you/</id>
        <link href="https://HorseLake.github.io/post/windows-10-chang-yong-kuai-jie-jian-ni-zhi-de-yong-you/">
        </link>
        <updated>2020-04-21T09:08:39.000Z</updated>
        <content type="html"><![CDATA[<p>Ctrl + X 剪切选定项</p>
<p>Ctrl + C（或 Ctrl + Insert） 复制选定项</p>
<p>Ctrl + V（或 Shift + Insert） 粘贴选定项</p>
<p>Ctrl + Z 撤消操作</p>
<p>Alt + Tab 在打开的应用之间切换</p>
<p>Alt + F4 关闭活动项，或者退出活动应用</p>
<p>Windows 徽标键 + L 锁定电脑</p>
<p>Windows 徽标键 + D 显示和隐藏桌面</p>
<p>F2 重命名选定项</p>
<p>F3 在文件资源管理器中搜索文件或文件夹</p>
<p>F4 在文件资源管理器中显示地址栏列表</p>
<p>F5 刷新活动窗口</p>
<p>F6 在窗口中或桌面上循环浏览屏幕元素</p>
<p>F10 激活活动应用中的菜单栏</p>
<p>Alt + F8 在登录屏幕上显示密码</p>
<p>Alt + Esc 以项目打开的顺序循环切换项目</p>
<p>Alt + 带下划线的字母 执行该字母对应的命令</p>
<p>Alt + Enter 显示选定项的属性</p>
<p>Alt + 空格键 为活动窗口打开快捷菜单</p>
<p>Alt + 向左键 后退</p>
<p>Alt + 向右键 前进</p>
<p>Alt + Page Up 向上移动一个屏幕</p>
<p>Alt + Page Down 向下移动一个屏幕</p>
<p>Ctrl + F4 关闭活动文档（在全屏模式和允许你同时打开多个文档的应用中）</p>
<p>Ctrl + A 选择文档或窗口中的所有项目</p>
<p>Ctrl + D（或 Delete） 删除选定项并将其移动到“回收站”</p>
<p>Ctrl + R（或 F5） 刷新活动窗口</p>
<p>Ctrl + Y 重做操作</p>
<p>Ctrl + 向右键 将光标移动到下一个字词的起始处</p>
<p>Ctrl + 向左键 将光标移动到上一个字词的起始处</p>
<p>Ctrl + 向下键 将光标移动到下一个段落的起始处</p>
<p>Ctrl + 向上键 将光标移动到上一个段落的起始处</p>
<p>Ctrl + Alt + Tab 使用箭头键在所有打开的应用之间切换</p>
<p>Ctrl + Alt + Shift + 箭头键 当分组或磁贴在“开始”菜单中获得焦点时，请将其按指定方向移动</p>
<p>Ctrl + 箭头键（用来移动到某个项目）+ 空格键 在窗口中或桌面上选择多个单独的项目</p>
<p>Ctrl + Shift 加某个箭头键 选择文本块</p>
<p>Ctrl + Esc 打开“开始”屏幕</p>
<p>Ctrl + Shift + Esc 打开任务管理器</p>
<p>Ctrl + Shift 在提供了多个键盘布局时切换键盘布局</p>
<p>Ctrl + 空格键 打开或关闭中文输入法编辑器 (IME)</p>
<p>Shift + F10 显示选定项的快捷菜单</p>
<p>Shift 加任意箭头键 在窗口中或桌面上选择多个项目，或者在文档中选择文本</p>
<p>Shift + Delete 无需先将选定项移动到“回收站”，直接将其删除</p>
<p>向右键 打开右侧的下一个菜单，或者打开子菜单</p>
<p>向左键 打开左侧的下一个菜单，或者关闭子菜单</p>
<p>Esc 停止或退出当前任务</p>
<p>Windows 徽标键键盘快捷方式</p>
<p>Windows 徽标键 打开或关闭“开始”菜单</p>
<p>Windows 徽标键 + A 打开“操作中心”</p>
<p>Windows 徽标键 + B 将焦点设置到通知区域</p>
<p>Windows 徽标键 + Shift + C 在侦听模式下打开 Cortana</p>
<p><strong>注意： Cortana 仅在某些国家/地区提供，并且某些 Cortana 功能可能无法随时随地使用。如果 Cortana 不可用或已关闭，你仍然可以使用搜索。</strong></p>
<p>Windows 徽标键 + D 显示和隐藏桌面</p>
<p>Windows 徽标键 + Alt + D 显示和隐藏桌面上的日期和时间</p>
<p>Windows 徽标键 + E 打开“文件资源管理器”</p>
<p>Windows 徽标键 + F 打开“反馈中心”</p>
<p>Windows 徽标键 + G 打开游戏栏（当游戏处于打开状态时）</p>
<p>Windows 徽标键 + H 打开“共享”超级按钮</p>
<p>Windows 徽标键 + I 打开“设置”</p>
<p>Windows 徽标键 + J 将焦点设置到 Windows 提示（如果可用）。</p>
<p><strong>Attention:出现 Windows 提示时，将焦点移到该提示。 再次按这些键盘快捷方式，将焦点移到定位 Windows 提示的屏幕上的元素。</strong></p>
<p>Windows 徽标键 + K 打开“连接”快速操作</p>
<p>Windows 徽标键 + L 锁定电脑或切换帐户</p>
<p>Windows 徽标键 + M 最小化所有窗口</p>
<p>Windows 徽标键 + O 锁定设备方向</p>
<p>Windows 徽标键 + P 选择演示显示模式</p>
<p>Windows 徽标键 + R 打开“运行”对话框</p>
<p>Windows 徽标键 + S 打开搜素</p>
<p>Windows 徽标键 + T 在任务栏上循环切换应用</p>
<p>Windows 徽标键 + U 打开“轻松使用设置中心”</p>
<p>Windows 徽标键 + V 循环切换通知</p>
<p>Windows 徽标键 + Shift + V 以相反的顺序循环切换通知</p>
<p>Windows 徽标键 + X 打开“快速链接”菜单</p>
<p>Windows 徽标键 + Z 显示在以全屏模式呈现的应用中可用的命令</p>
<p>Windows 徽标键 + 逗号 (,) 临时快速查看桌面</p>
<p>Windows 徽标键 + Pause 显示“系统属性”对话框</p>
<p>Windows 徽标键 + Ctrl + F 搜索电脑（如果你位于网络中）</p>
<p>Windows 徽标键 + Shift + M 将最小化的窗口还原到桌面</p>
<p>Windows 徽标键 + 数字 打开桌面，并启动固定到任务栏的位于该数字所表示位置的应用。如果该应用已在运行，则切换到该应用。</p>
<p>Windows 徽标键 + Shift + 数字 打开桌面，并启动固定到任务栏的位于该数字所表示位置的应用的新实例</p>
<p>Windows 徽标键 + Ctrl + 数字 打开桌面，并切换到固定到任务栏的位于该数字所表示位置的应用的最后一个活动窗口</p>
<p>Windows 徽标键 + Alt + 数字 打开桌面，并打开固定到任务栏的位于该数字所表示位置的应用的跳转列表</p>
<p>Windows 徽标键 + Ctrl + Shift + 数字 打开桌面，并以管理员身份打开位于任务栏上给定位置的应用的新实例</p>
<p>Windows 徽标键 + Tab 打开“任务视图”</p>
<p>Windows 徽标键 + 向上键 最大化窗口</p>
<p>Windows 徽标键 + 向下键 从屏幕中删除当前应用或最小化桌面窗口</p>
<p>Windows 徽标键 + 向左键 将应用或桌面窗口最大化到屏幕左侧</p>
<p>Windows 徽标键 + 向右键 将应用或桌面窗口最大化到屏幕右侧</p>
<p>Windows 徽标键 + Home 最小化除活动桌面窗口以外的所有窗口（在第二道笔划时还原所有窗口）</p>
<p>Windows 徽标键 + Shift + 向上键 将桌面窗口拉伸到屏幕的顶部和底部</p>
<p>Windows 徽标键 + Shift + 向下键 在垂直方向上还原/最小化活动桌面窗口，同时保持宽度不变</p>
<p>Windows 徽标键 + Shift + 向左键或向右键 将桌面中的应用或窗口从一个监视器移动到另一个监视器</p>
<p>Windows 徽标键 + 空格键 切换输入语言和键盘布局</p>
<p>Windows 徽标键 + Ctrl + 空格键 更改为以前选择的输入</p>
<p>Windows 徽标键 + Enter 打开“讲述人”</p>
<p>Windows 徽标键 + 正斜杠 (/) 启动 IME 重新转换</p>
<p>Windows 徽标键 + 加号 (+) 或减号 (-) 使用“放大镜”放大或缩小</p>
<p>Windows 徽标键 + Esc 退出“放大镜”</p>
<h2 id="命令提示符键盘快捷方式">命令提示符键盘快捷方式</h2>
<p>Ctrl + C（或 Ctrl + Insert） 复制选定文本</p>
<p>Ctrl + V（或 Shift + Insert） 粘贴选定文本</p>
<p>Ctrl + M 进入标记模式</p>
<p>Alt + 选择键 在阻止模式中开始选择</p>
<h2 id="箭头键-按指定方向移动光标">箭头键 按指定方向移动光标</h2>
<p>Page Up 将光标向上移动一页</p>
<p>Page Down 将光标向下移动一页</p>
<p>Ctrl + Home（标记模式） 将光标移动到缓冲区的起始处</p>
<p>Ctrl + End（标记模式） 将光标移动到缓冲区的末尾</p>
<p>Ctrl + 向上键 在输出历史记录中向上移动一行</p>
<p>Ctrl + 向下键 在输出历史记录中向下移动一行</p>
<p>Ctrl + Home（历史记录导航） 如果命令行为空，则将视口移动到缓冲区顶部。否则，删除命令行中光标左侧的所有字符。</p>
<p>Ctrl + End（历史记录导航） 如果命令行为空，则将视口移动到命令行。否则，删除命令行中光标右侧的所有字符。</p>
<h2 id="对话框键盘快捷方式">对话框键盘快捷方式</h2>
<p>F4 显示活动列表中的项目</p>
<p>Ctrl + Tab 在选项卡上向前移动</p>
<p>Ctrl + Shift + Tab 在选项卡上向后移动</p>
<p>Ctrl + 数字（数字 1 到 9） 移动到第 n 个选项卡</p>
<p>Tab 在选项上向前移动</p>
<p>Shift + Tab 在选项上向后移动</p>
<p>Alt + 带下划线的字母 执行与该字母一起使用的命令（或选择相应的选项）</p>
<p>空格键 如果活动选项是复选框，则选中或清除该复选框</p>
<p>Backspace 如果在“另存为”或“打开”对话框中选中某个文件夹，则打开上一级文件夹</p>
<p>箭头键 如果活动选项是一组选项按钮，则选择某个按钮</p>
<h2 id="文件资源管理器键盘快捷方式">文件资源管理器键盘快捷方式</h2>
<p>Alt + D 选择地址栏</p>
<p>Ctrl + E 选择搜索框</p>
<p>Ctrl + F 选择搜索框</p>
<p>Ctrl + N 打开新窗口</p>
<p>Ctrl + W 关闭活动窗口</p>
<p>Ctrl + 鼠标滚轮 更改文件和文件夹图标的大小及外观</p>
<p>Ctrl + Shift + E 显示选定文件夹上的所有文件夹</p>
<p>Ctrl + Shift + N 创建一个新文件夹</p>
<p>Num Lock + 星号 (*) 显示选定文件夹下的所有子文件夹</p>
<p>Num Lock + 加号 (+) 显示选定文件夹的内容</p>
<p>Num Lock + 减号 (-) 折叠选定文件夹</p>
<p>Alt + P 显示预览面板</p>
<p>Alt + Enter 打开选定项的“属性”对话框</p>
<p>Alt + 向右键 查看下一个文件夹</p>
<p>Alt + 向上键 查看上一级文件夹</p>
<p>Alt + 向左键 查看上一个文件夹</p>
<p>Backspace 查看上一个文件夹</p>
<p>End 显示活动窗口的底端</p>
<p>Home 显示活动窗口的顶端</p>
<p>F11 最大化或最小化活动窗口</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Luogu P1031 均分纸牌 题解]]></title>
        <id>https://HorseLake.github.io/post/luogu-p1031-jun-fen-zhi-pai-ti-jie/</id>
        <link href="https://HorseLake.github.io/post/luogu-p1031-jun-fen-zhi-pai-ti-jie/">
        </link>
        <updated>2020-04-17T11:02:43.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题解">题解</h1>
<p><strong>废话不多说，直接上题解</strong></p>
<h2 id="题解-2">题解</h2>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;iomanip&gt;
#include&lt;cstring&gt;
#include&lt;cmath&gt;
#include&lt;string&gt;
#include&lt;cstdlib&gt;
#include&lt;queue&gt;
#include&lt;map&gt;
#include&lt;set&gt;
#include&lt;ctime&gt;
#include&lt;algorithm&gt;
using namespace std; 
int a[10010],n,sum=0,x=0,to1=0;
int main(){
    cin&gt;&gt;n;
    for(int i=1;i&lt;=n;i++){
       cin&gt;&gt;a[i];
       sum+=a[i];
    }
    x=sum/n;
    for(int i=1;i&lt;=n;i++) a[i]=a[i]-x;
    for(int i=1;i&lt;=n;i++){
        if(a[i]==0) continue;
        a[i+1]=a[i]+a[i+1];
        to1++;
    }
    cout&lt;&lt;to1;
    return 0;
}
</code></pre>
<p>原网站：<a href="https://www.luogu.com.cn/problem/P1031"><strong>P1031 均分纸牌</strong></a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Luogu P1876 开灯 题解]]></title>
        <id>https://HorseLake.github.io/post/luogu-p1876-kai-deng-ti-jie/</id>
        <link href="https://HorseLake.github.io/post/luogu-p1876-kai-deng-ti-jie/">
        </link>
        <updated>2020-04-16T05:11:33.000Z</updated>
        <content type="html"><![CDATA[<p>这道题，乍一看，数据量很大，假如直接用For循环的话，不超时才怪！</p>
<p>于是我列下来了一张表格：</p>
<table>
<thead>
<tr>
<th style="text-align:center">灯数</th>
<th style="text-align:center">最后开灯的序号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">1 4</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">1 4</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">1 4</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">1 4</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">1 4</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">1 4 9</td>
</tr>
</tbody>
</table>
<p>发现都是平方数，所以代码为：</p>
<pre><code class="language-cpp">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;iomanip&gt;
#include&lt;cstring&gt;
#include&lt;cmath&gt;
#include&lt;string&gt;
#include&lt;cstdlib&gt;
#include&lt;queue&gt;
#include&lt;map&gt;
#include&lt;set&gt;
#include&lt;ctime&gt;
#include&lt;algorithm&gt;
using namespace std;
int main(){
	long long n;
	cin&gt;&gt;n;
	for(int i=1;i*i&lt;=n;i++){
		cout&lt;&lt;i*i&lt;&lt;&quot; &quot;;
	} 
	return 0;
}
</code></pre>
<p>欢迎采纳！AC代码！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++获取系统时间]]></title>
        <id>https://HorseLake.github.io/post/chuo-qu-xi-tong-shi-jian/</id>
        <link href="https://HorseLake.github.io/post/chuo-qu-xi-tong-shi-jian/">
        </link>
        <updated>2020-04-16T00:21:40.000Z</updated>
        <content type="html"><![CDATA[<h2 id="方案localtime">方案：localtime()</h2>
<h6 id="优点仅使用c标准库缺点只能精确到秒级">优点：仅使用C标准库；缺点：只能精确到秒级</h6>
<p>time_t是定义在time.h中的一个类型，表示一个日历时间，也就是从1970年1月1日0时0分0秒到此时的秒数，原型是：</p>
<pre><code class="language-cpp"> typedef long time_t;        /* time value */
</code></pre>
<p>可以看出time_t其实是一个长整型，由于长整型能表示的数值有限，因此它能表示的最迟时间是2038年1月18日19时14分07秒。</p>
<p>函数time可以获取当前日历时间时间，time的定义：<br>
time_t time(time_t *)</p>
<p>time_t (typedef __int64  time_t )只是一个长整型，不符合我们的使用习惯，需要转换成本地时间，就要用到tm结构，time.h中结构tm的原型是：</p>
<pre><code class="language-cpp">struct tm {  
        int tm_sec;     /* seconds after the minute - [0,59] */  
        int tm_min;     /* minutes after the hour - [0,59] */  
        int tm_hour;    /* hours since midnight - [0,23] */  
        int tm_mday;    /* day of the month - [1,31] */  
        int tm_mon;     /* months since January - [0,11] */  
        int tm_year;    /* years since 1900 */  
        int tm_wday;    /* days since Sunday - [0,6] */  
        int tm_yday;    /* days since January 1 - [0,365] */  
        int tm_isdst;   /* daylight savings time flag */  
       };  
</code></pre>
<p>可以看出，这个机构定义了年、月、日、时、分、秒、星期、当年中的某一天、夏令时。可以用这个结构很方便的显示时间。</p>
<p>用localtime获取当前系统时间，该函数将一个time_t时间转换成tm结构表示的时间，函数原型：<br>
struct tm * localtime(const time_t *)<br>
使用gmtime函数获取格林尼治时间，函数原型：<br>
struct tm * gmtime(const time_t *)</p>
<h3 id="输出方式1">输出方式1：</h3>
<pre><code class="language-cpp">#include &lt;iostream&gt;  
#include &lt;time.h&gt;  
using namespace std;  
void dsptime(const struct tm *); //输出时间。  
  
int main(void)  
{  
 time_t nowtime;  
 nowtime = time(NULL); //获取日历时间  
 cout &lt;&lt; nowtime &lt;&lt; endl;  //输出nowtime  
  
 struct tm *local,*gm;  
 local=localtime(&amp;nowtime);  //获取当前系统时间  
 dsptime(local);   
 gm=gmtime(&amp;nowtime);  //获取格林尼治时间  
 dsptime(gm);  
    
 return 0;  
}  
void dsptime(const struct tm * ptm)  
{  
 char *pxq[]={&quot;日&quot;,&quot;一&quot;,&quot;二&quot;,&quot;三&quot;,&quot;四&quot;,&quot;五&quot;,&quot;六&quot;};  
 cout &lt;&lt; ptm-&gt;tm_year+1900 &lt;&lt; &quot;年&quot; &lt;&lt; ptm-&gt;tm_mon+1 &lt;&lt; &quot;月&quot; &lt;&lt; ptm-&gt;tm_mday &lt;&lt; &quot;日 &quot; ;  
 cout &lt;&lt; ptm-&gt;tm_hour &lt;&lt; &quot;:&quot; &lt;&lt; ptm-&gt;tm_min &lt;&lt; &quot;:&quot; &lt;&lt; ptm-&gt;tm_sec &lt;&lt;&quot; &quot; ;  
 cout &lt;&lt; &quot; 星期&quot; &lt;&lt;pxq[ptm-&gt;tm_wday] &lt;&lt; &quot; 当年的第&quot; &lt;&lt; ptm-&gt;tm_yday &lt;&lt; &quot;天 &quot; &lt;&lt; endl;  
}  
</code></pre>
<p>输出方式2：</p>
<pre><code class="language-cpp">#include &lt;time.h&gt;   
#include &lt;stdio.h&gt;   
int main( void )   
{   
    time_t t = time(0);   
    char tmp[64];   
    strftime( tmp, sizeof(tmp), &quot;%Y/%m/%d %X %A 本年第%j天 %z&quot;,localtime(&amp;t) );   
    puts( tmp );   
    return 0;   
}  
</code></pre>
<p>C/C++在time.h中提供了一个自定义时间格式的函数strftime，函数原型：<br>
size_t strftime(char *strDest, size_t maxsize, const char *format, const struct tm *timeptr);<br>
可使用的格式化字符串：</p>
<pre><code>%a 星期几的简写 
%A 星期几的全称 
%b 月分的简写 
%B 月份的全称 
%c 标准的日期的时间串 
%C 年份的后两位数字 
%d 十进制表示的每月的第几天 
%D 月/天/年 
%e 在两字符域中，十进制表示的每月的第几天 
%F 年-月-日 
%g 年份的后两位数字，使用基于周的年 
%G 年分，使用基于周的年 
%h 简写的月份名 
%H 24小时制的小时 
%I 12小时制的小时
%j 十进制表示的每年的第几天 
%m 十进制表示的月份 
%M 十时制表示的分钟数 
%n 新行符 
%p 本地的AM或PM的等价显示 
%r 12小时的时间 
%R 显示小时和分钟：hh:mm 
%S 十进制的秒数 
%t 水平制表符 
%T 显示时分秒：hh:mm:ss 
%u 每周的第几天，星期一为第一天 （值从0到6，星期一为0）
%U 第年的第几周，把星期日做为第一天（值从0到53）
%V 每年的第几周，使用基于周的年 
%w 十进制表示的星期几（值从0到6，星期天为0）
%W 每年的第几周，把星期一做为第一天（值从0到53） 
%x 标准的日期串 
%X 标准的时间串 
%y 不带世纪的十进制年份（值从0到99）
%Y 带世纪部分的十进制年份 
%z，%Z 时区名称，如果不能得到时区名称则返回空字符。
%% 百分号
···</code></pre>
]]></content>
    </entry>
</feed>